#!/usr/bin/env ruby

require 'rubygems'
require 'bundler'
Bundler.require

require 'gbs/utils'
require 'gbs/rpc/server'

Thread.abort_on_exception = true

module GBS
    options = GBS::Utils.parse_options [
        %w( -h  --help        Print this help and exit           ),
        %w( -v  --version     Print version information and exit ),
        %w( -s  --start       Start the daemon                   ),
        %w( -x  --stop        Stop the daemon                    ),
    ]

    ARG_OPTS, ARG_PARAMS = GBS::Utils.parse_arguments(options, ARGV)

    if ARG_OPTS[:version]
        puts "gbs v0.1.0"
        exit
    end

    if ARG_OPTS[:help]
        GBS::Utils.send_help(options)
        exit
    end

    if ARG_OPTS[:start]
        Process.daemon(true, true)

        require 'gbs/environment'
        require 'gbs/environment_manager'
        require 'gbs/logger'
        require 'gbs/project'
        require 'gbs/task'
        require 'gbs/project_manager'
        require 'gbs/scheduler'
        require 'gbs/userdata'

        Userdata.create_directories
        Logger.init
        Scheduler.init
        ProjectManager.init
        EnvironmentManager.init

        Scheduler.start

        @server = RPC::Server.new

        sleep

        Logger.shutdown
        ProjectManager.shutdown
        @server.stop

        Process.exit
    end

    # Client actions
    
    begin
        @gbs = RPC::Client.new
    rescue Errno::ECONNREFUSED => e
        port = 2552
        host = 'localhost'
        puts "Can not find server on #{host}:#{port}."
        puts "Server not started? try #{$0} --start"
        puts ""
        Utils.send_help(options)
        Process.exit
    end

    if ARG_OPTS[:stop]
        @gbs.exit
        Process.exit
    end

    if ARG_PARAMS[0] == 'reload'
        puts "Reloading..."
        blaat = @gbs.reload_userdata()
        puts " done! \n"
        puts blaat
        Process.exit
    end

    if ARG_PARAMS[0] == 'build'
        require 'shellwords'

        @gbs.run_task(ARG_PARAMS[1], :build)

        Signal.trap("SIGTSTP") do
            puts " Continuing build in the background..."
            Process.exit
        end

        @gbs.socket.each_line do |line|
            # json = JSON.parse(json, symbolize_names: true)

            # case json[:msg]
            # when 'meta'
            #     puts "Starting build for #{json[:project].blue.bold} on #{json[:env].blue.bold}"
            #     puts "Press ^Z to continue in the background."
            #     puts
            # when 'start_command'
            #     cmd = json[:args].shelljoin
            #     puts "$ #{cmd}".yellow
            # when 'progress_command'
            #     output = json[:output].map do |n|
            #         "#{"%s".send(n.first == 'out' ? :green : :red)} #{"[%9.3f]".black.bold} %s" % n
            #     end
            #     puts output
            # when 'finish_command'
            #     exitcolor = json[:exitstatus] == 0 ? :green : :red
            #     exitstatus = json[:exitstatus].to_s.bold.send(exitcolor)
            #     duration = "in #{json[:duration].round(2)}s".cyan

            #     puts "#{"exit:".yellow} #{exitstatus} #{duration}"
            #     puts
            # when 'done'
            #     resultcolor = json[:result] == 'success' ? :green : :red
            #     duration = "in #{json[:duration].round(2)}s"

            #     puts "Build result: #{json[:result].send(resultcolor).bold} #{duration.cyan}"
            #     puts "Generated artifacts:"
            #     puts Utils.tabularize(json[:artifacts].map { |n| [
            #         n[:name].blue.bold,
            #         "#{n[:size] / 1024 / 1024}M".yellow
            #     ] }, indent: 4)
            # end

            puts line
            break if line =~ /^Build result: /
        end

        Process.exit
    end

    environments = @gbs.get_environments.map do |env|
        loadavg = "%4.2f" % env[:loadavg][1]
        load_max = env[:load_max]
        loadavg_percent = (env[:loadavg][1] / load_max * 100).to_i
        loadavg_color = (loadavg_percent < 40) ? :green :
                        (loadavg_percent < 70) ? :yellow : :red

        [
            env[:name].blue.bold,
            ("%3d%%" % [ loadavg_percent ]).send(loadavg_color),
            "#{loadavg} / #{load_max}".cyan
        ]
    end

    projects = @gbs.get_projects.map do |project|
        name = project[:name].blue.bold

        history = Array.new(5) + project[:history]
        history.shift while history.count > 5
        history.map! { |n| n.to_sym unless n.nil? }
        history.map! do |n|
            {
                nil =>   '-'.black.bold,
                failure: 'x'.red.bold,
                success: 'o'.green.bold
            }[n]
        end

        last_build = project[:last_build].nil? ? "no builds yet".red
                   : Utils.time_ago(Time.parse(project[:last_build])).yellow

        [ name, history.join(' '), last_build ]
    end

    running_tasks = @gbs.running_tasks.map do |task|
        task[:start] = Time.parse(task[:start])

        [
            task[:project].blue.bold,
            task[:task].blue,
            Utils.time_ago(task[:start]).yellow,
            task[:env].cyan
        ]
    end
    running_tasks[0] ||= [ 'no tasks running'.black.bold ]

    # builds = @gbs.get_recent_builds.map do |build|
    #     build[:start] = Time.parse(build[:start])
    #     result_color = build[:result] == 'success' ? :green
    #                  : build[:result] == 'failure' ? :red : :yellow

    #     [
    #         build[:project].blue.bold,
    #         build[:result].send(result_color).bold,
    #         Utils.time_ago(build[:start]).yellow,
    #         build[:env].cyan
    #     ]
    # end

    puts
    puts "Environments"
    puts Utils.tabularize(environments, minsizes: [ 16, 4 ]).join("\n").indent(4)
    puts
    puts "Projects"
    puts Utils.tabularize(projects, minsizes: [ 16, 9 ]).join("\n").indent(4)
    puts
    puts "Running tasks"
    puts Utils.tabularize(running_tasks, minsizes: [ 16 ]).join("\n").indent(4)
    puts
    # puts "Recent builds"
    # puts Utils.tabularize(builds, minsizes: [ 16 ]).join("\n").indent(4)
end
